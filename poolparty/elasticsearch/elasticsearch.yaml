# Simple StatefulSet data can be applied directly into the Kubernetes in order to start up an Elasticsearch node
# that can be used for testing and prototyping.
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: elasticsearch
  namespace: default
spec:
  replicas: 1
  serviceName: elasticsearch
  updateStrategy: 
    type: RollingUpdate
  podManagementPolicy: Parallel
  revisionHistoryLimit: 10
  persistentVolumeClaimRetentionPolicy: {}
  selector:
    matchLabels:
      app.kubernetes.io/name: elasticsearch
      app.kubernetes.io/instance: elasticsearch
  volumeClaimTemplates:
    - metadata:
        name: storage
      spec:
        accessModes: ["ReadWriteOnce"]
        resources:
          requests:
            storage: 5Gi
  template:
    metadata:
      labels:
        app.kubernetes.io/name: elasticsearch
        app.kubernetes.io/instance: elasticsearch
      annotations: {}
    spec:
      terminationGracePeriodSeconds: 120
      serviceAccountName: default
      automountServiceAccountToken: false
      volumes:
        - name: temp-dir
          emptyDir: 
            sizeLimit: 512Mi
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 1
              podAffinityTerm:
                topologyKey: kubernetes.io/hostname
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: elasticsearch
                    app.kubernetes.io/instance: elasticsearch
      securityContext:
        fsGroup: 1001
        fsGroupChangePolicy: OnRootMismatch
        runAsGroup: 0
        runAsNonRoot: true
        runAsUser: 1001
        seccompProfile:
          type: RuntimeDefault
      initContainers:
        # Sets system settings for the Elastic container.
        - name: elastic-setup
          image: busybox:1.28
          command:
            - sh
            - -ec
            - |
              CURRENT=`sysctl -n vm.max_map_count`;
              DESIRED="262144";
              if [ "$DESIRED" -gt "$CURRENT" ]; then
                sysctl -w vm.max_map_count=262144;
              fi;
              CURRENT=`sysctl -n fs.file-max`;
              DESIRED="65536";
              if [ "$DESIRED" -gt "$CURRENT" ]; then
                sysctl -w fs.file-max=65536;
              fi;
      containers:
        - name: elasticsearch
          # Custom image containing additional customizations and plugins for PoolParty.
          image: docker.io/ontotext/poolparty-elasticsearch:8.17.6
          imagePullPolicy: IfNotPresent
          ports:
            - name: http
              containerPort: 9200
              protocol: TCP
            - name: transport
              containerPort: 9300
              protocol: TCP
          env:
            - name: ELASTICSEARCH_TRANSPORT_PORT_NUMBER
              value: "9300"
            - name: ELASTICSEARCH_HTTP_PORT_NUMBER
              value: "9200"
            - name: "discovery.type"
              value: single-node
            - name: "xpack.security.transport.ssl.enabled"
              value: "false"
          envFrom:
            - secretRef:
                name: "elasticsearch-secret-properties"
          volumeMounts:
            - name: storage
              mountPath: /var/lib/elasticsearch/data
            - name: temp-dir
              mountPath: /tmp
              subPath: tmp-dir
          resources: 
            limits:
              memory: 4Gi
            requests:
              cpu: 500m
              memory: 4Gi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: false
            seccompProfile:
              type: RuntimeDefault
          # Simple probe for the example purposes.
          startupProbe:
            exec:
              command:
                - bash
                - -c
                - |
                  set -e
                  RESPONSE=$(curl -s -u 'elastic:${ELASTIC_PASSWORD}' -X GET http://localhost:9200/_cluster/health?pretty | grep status | grep -iPo '(green|yellow|red)')
                  [ "$RESPONSE" == "red" ] && exit 1 || exit 0
            failureThreshold: 300
            periodSeconds: 3
            timeoutSeconds: 1
          # Simple probe for the example purposes.
          readinessProbe:
            exec:
              command:
                - bash
                - -c
                - |
                  set -e
                  RESPONSE=$(curl -s -u 'elastic:${ELASTIC_PASSWORD}' -X GET http://localhost:9200/_cluster/health?pretty | grep status | grep -iPo '(green|yellow|red)')
                  [ "$RESPONSE" == "red" ] && exit 1 || exit 0
            periodSeconds: 10
            timeoutSeconds: 5
          # Simple probe for the example purposes.
          livenessProbe:
            exec:
              command:
                - bash
                - -c
                - |
                  set -e
                  RESPONSE=$(curl -s -u 'elastic:${ELASTIC_PASSWORD}' -X GET http://localhost:9200/_cluster/health?pretty | grep status | grep -iPo '(green|yellow|red)')
                  [ "$RESPONSE" == "red" ] && exit 1 || exit 0
            initialDelaySeconds: 60
            periodSeconds: 10
            timeoutSeconds: 5
---
# Secret for the Elasticsearch user password
# By default the username is 'elastic'
apiVersion: v1
kind: Secret
metadata:
  name: elasticsearch-secret-properties
data:
  # 'my-elastic-pass' base64 encoded
  ELASTIC_PASSWORD: bXktZWxhc3RpYy1wYXNz
---
# Service for the Elasticsearch
apiVersion: v1
kind: Service
metadata:
  name: elasticsearch
  namespace: default
spec:
  type: ClusterIP
  selector:
    app.kubernetes.io/name: elasticsearch
    app.kubernetes.io/instance: elasticsearch
  ports:
    - name: http
      port: 9200
      targetPort: http
      protocol: TCP
    - name: transport
      port: 9300
      targetPort: http
      protocol: TCP
